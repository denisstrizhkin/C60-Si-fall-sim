### init ###
units metal
dimension 3
boundary p p m
atom_style atomic
atom_modify map yes

read_data ${input_file}
balance 1.0 shift xyz 10 1.0


### variables ###
variable bath_floor_top equal 'zlo + 1.5 * v_lattice'
variable Si_fixed_top equal 'zlo + 0.5 * v_lattice'
variable C60_z equal 'v_C60_z_offset + v_Si_top'
variable C60_vel equal '-sqrt(v_energy * 1000) * 5.174 '

### regions ###
lattice diamond ${lattice} orient x 1 0 0 orient y 0 1 0 orient z 0 0 1

region Si_fixed block EDGE EDGE EDGE EDGE EDGE ${Si_fixed_top} units box

region floor   block EDGE          EDGE          EDGE          EDGE          ${Si_fixed_top} ${bath_floor_top} units box
region x_left  block EDGE          $(xlo + xlat) EDGE          EDGE          ${Si_fixed_top} ${Si_top}         units box
region x_right block $(xhi - xlat) EDGE          EDGE          EDGE          ${Si_fixed_top} ${Si_top}         units box
region y_left  block EDGE          EDGE          EDGE          $(ylo + ylat) ${Si_fixed_top} ${Si_top}         units box
region y_right block EDGE          EDGE          $(yhi - ylat) EDGE          ${Si_fixed_top} ${Si_top}         units box

region bath union 5 floor x_right x_left y_right y_left

region C60_box block EDGE EDGE EDGE EDGE $(v_C60_z - 10) EDGE units box

region clusters block EDGE EDGE EDGE EDGE 0 INF units box

region not_outside block $(xlo + xlat * 2) $(xhi - xlat * 2) $(ylo + ylat * 2) $(yhi - ylat * 2) EDGE $(v_Si_top + zlat * 2) units box

write_restart ${vacs_restart_file}


### potentials ###

pair_style tersoff/zbl
pair_coeff * * SiC.tersoff.zbl Si C
neighbor 0.0 bin
neigh_modify every 5 delay 0 check no

# pair_style  hybrid airebo 3.0 tersoff/zbl
# pair_coeff  * * tersoff/zbl SiC.tersoff.zbl Si C
# pair_coeff  2 2 none
# pair_coeff  * * airebo CH.airebo NULL C
# neighbor    3.0 bin


### C60 molecule ###
molecule C60 ${mol_file}
create_atoms 1 single ${C60_x} ${C60_y} ${C60_z} mol C60 1 units box
group C60 region C60_box


### groups ###
group C type 2
group Si type 1

group Si_fixed region Si_fixed
group nve subtract all Si_fixed
group thermostat dynamic Si region bath

group not_outside region not_outside
group outside subtract Si not_outside


### computes ###

# compute ke per atom
compute atom_ke all ke/atom

#temp
#variable zero_lvl equal "83.2"

# voronoi
compute voro_occupation Si voronoi/atom occupation only_group
variable is_vacancy atom "c_voro_occupation[1]==0"
variable vacancy_id atom "v_is_vacancy*id"
compute vacancies Si reduce sum v_is_vacancy

# sputtered atoms
variable is_sputtered atom "z>v_zero_lvl"
compute sputter_all all reduce sum v_is_sputtered
compute sputter_si  Si  reduce sum v_is_sputtered
compute sputter_c   C   reduce sum v_is_sputtered


### thermo ###
reset_timestep 0
timestep ${step}
thermo 25
thermo_style custom step pe ke etotal temp c_vacancies dt time c_sputter_all c_sputter_c c_sputter_si


### fixes ###
fix balance all balance 100 1.0 shift xyz 10 1.0
fix nve nve nve
fix tbath thermostat temp/berendsen ${temperature} ${temperature} 0.001
fix estop all electron/stopping 10.0 ${elstop_table}
fix dt all dt/reset 1 $(v_step/10) ${step} 0.1


### dumps ###
#dump during all custom 20 ${dump_during} id type x y z


### run simulation ###
velocity C60 set NULL NULL ${C60_vel} sum yes units box

#fix temp_time all print 10 "$(time) $(temp)" file {run_dir}/temp_time.txt screen no
#fix penrg_time all print 10 "$(time) $(pe)" file {run_dir}/penrg_time.txt screen no

run 1000
unfix estop
run ${run_time}

group clusters variable is_sputtered
compute clusters all cluster/atom 3
compute mass clusters property/atom mass

dump clusters clusters custom 1 ${dump_cluster} id x y z vx vy vz type c_mass c_clusters c_atom_ke
dump final all custom 1 ${dump_final} id x y z vx vy vz type c_clusters c_atom_ke

run 0

undump clusters
undump final

fix tbath nve temp/berendsen ${temperature} ${temperature} 0.001
run 1000 

unfix tbath
fix tbath thermostat temp/berendsen ${temperature} ${temperature} 0.001
run 1000

group vac variable is_vacancy static
write_dump vac custom ${dump_crater_id} id

write_data ${write_file}
